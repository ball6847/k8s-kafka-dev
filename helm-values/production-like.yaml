# Bitnami Kafka Helm Chart - Production-like Configuration
# This configuration mimics production settings with multiple brokers and monitoring

# Global settings
global:
  storageClass: ""

# Kafka configuration
kafka:
  # Number of Kafka brokers (3 for production-like setup)
  replicaCount: 3

  # Resource requests and limits (production-like)
  resources:
    requests:
      cpu: 1
      memory: 4Gi
    limits:
      cpu: 2
      memory: 8Gi

  # Heap size settings
  heapOpts: "-Xmx4096m -Xms4096m"

  # Persistence enabled with larger volumes
  persistence:
    enabled: true
    size: 20Gi
    # storageClass: "fast-ssd"
    accessModes:
      - ReadWriteOnce

  # Production-like Kafka configuration
  config: |
    # Production-oriented settings
    offsets.topic.replication.factor=3
    transaction.state.log.replication.factor=3
    transaction.state.log.min.isr=2
    default.replication.factor=3
    min.insync.replicas=2
    
    # Log settings
    log.segment.bytes=1073741824
    log.retention.hours=168
    log.retention.bytes=10737418240
    
    # Performance and reliability settings
    num.network.threads=8
    num.io.threads=16
    socket.send.buffer.bytes=102400
    socket.receive.buffer.bytes=102400
    socket.request.max.bytes=104857600
    
    # Compression
    compression.type=lz4
    
    # Inter-broker protocol
    inter.broker.protocol.version=3.0
    
    # Leader election
    unclean.leader.election.enable=false
    
    # Timeouts
    group.initial.rebalance.delay.ms=3000

  # Listeners configuration
  listeners:
    client:
      containerPort: 9092
      protocol: PLAINTEXT
      name: CLIENT
    controller:
      name: CONTROLLER
      containerPort: 9093
      protocol: PLAINTEXT
    interbroker:
      containerPort: 9094
      protocol: PLAINTEXT
      name: INTERNAL
    external:
      containerPort: 9095
      protocol: PLAINTEXT
      name: EXTERNAL

  # Service configuration
  service:
    type: ClusterIP
    ports:
      client: 9092

  # Pod Disruption Budget
  pdb:
    create: true
    minAvailable: 2

  # Anti-affinity rules for production
  podAntiAffinity:
    type: hard
    topologyKey: kubernetes.io/hostname

# ZooKeeper configuration (disabled - using KRaft mode)
zookeeper:
  enabled: false

# KRaft mode settings
kraft:
  enabled: true

# External access configuration
externalAccess:
  enabled: true
  service:
    type: LoadBalancer
    ports:
      external: 9094
    domain: ""
  autoDiscovery:
    enabled: true

# Metrics and monitoring enabled
metrics:
  kafka:
    enabled: true
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi
  jmx:
    enabled: true
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi

# ServiceMonitor for Prometheus
serviceMonitor:
  enabled: true
  interval: 30s
  scrapeTimeout: 10s

# Volume permissions
volumePermissions:
  enabled: true
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

# Sysctls configuration
sysctlImage:
  enabled: true

# Log persistence
logPersistence:
  enabled: true
  size: 10Gi
  accessModes:
    - ReadWriteOnce

# Network Policy (optional)
networkPolicy:
  enabled: false

# Security context
podSecurityContext:
  enabled: true
  fsGroup: 1001
  runAsUser: 1001
  runAsGroup: 1001
  runAsNonRoot: true

containerSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  seccompProfile:
    type: RuntimeDefault
